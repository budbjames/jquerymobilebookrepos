[[chapid_1]]
== Markup Demo
This is a chapter.

This file illustrates some of the most common elements used in O'Reilly books.

[NOTE]
====
Section titles can be in either of two formats: "underlined" or delimited.

Note that the levels described in the
http://www.methods.co.nz/asciidoc/userguide.html[AsciiDoc User Guide]
can be confusing: in asciidoc, the document (book) is considered level
0; generally a chapter will be at asciidoc level 1 (unless you're
dividing the book into parts), and sections within chapters start at
asciidoc level 3 (which is equivalent to DocBook +<sect1>+).

====

Top-Level Section Title (Underlined Style)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Narrative text here.

Second-Level Section Title (Underlined Style)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
More text here.

Third-Level Section Title (Underlined Style)
++++++++++++++++++++++++++++++++++++++++++++
And some more here.

[[ALT1]]
=== Top-Level Section (Delimited Style) ===
This one designates asciidoc level 2 (DocBook +<sect1>+).

[[ALT-SUB1]]
==== Second-Level Section (Delimited Style)
This one designates asciidoc level 3 (DocBook +<sect2>+).
Also note that you can have the delimiter just on the left as in this one, or on both sides as in <<ALT1>>.

[[ALT-SUBSUB1]] 
===== Third-Level Section (Delimited Style)
This one designates asciidoc level 4 (DocBook +<sect3>+).

[[XREFS]]
=== Cross-References

To generate a cross-reference, use this syntax:

----
<<ID>>
----

where `ID` is the anchor or BlockID of the target, which you place in
double square-brackets above that block.

The O'Reilly build system will transform this into a standard +<xref>+
for you: the rendered text will adjust automatically if you later move
the target or reword its title, and it will work as a hyperlink in
online versions. Any time you refer to another component of your book,
please be sure to use xref markup, not hardcoded text.

<<XREF_TABLE>> shows the standard text generated from xrefs in
PDF builds.

[[XREF_TABLE]]
.Standard Cross-Reference Formats
[options="header"]
|=======
|Target|Generated Cross-Reference Text
|chapter|Chapter 17
|table|Table 4-1
|figure|Figure 2-3
|example|Example 3-5
|sidebar|"Fooing the Bar" on page 23
|section|"Inline Macros" on page 14
|=======

Here are some live examples (hover over the text in the PDF to
locate the hyperlink):

* See <<BLOCKS>> for details.
* The results is shown in <<FIG1>>.
* Flip ahead to <<chapid_2>> for a preview.

generated from this source:

----
* See <<BLOCKS>> for details.
* The results is shown in <<FIG1>>.
* Flip ahead to <<chapid_2>> for a preview.
----

[WARNING]
====

Please do not use asciidoc's optional `xreflabel` and `caption`
features on anchors and xrefs, as these interfere with our standard
generated xref formats (and will likely be stripped on intake). Your
production editor has some flexibility in using alternate xref formats
later in production where appropriate. If you have questions about
xref formats or want customizations, please contact
mailto:toolsreq@oreilly.com[]
====

[[INLINES]]
=== Inline Elements

Here's some some _italic_ and some +monospaced+ (aka "constant-width"
or "CW") text. 

Backticks can also be used for literal (CW) text, for example: `ls -al`

Using inlines in asciidoc can be tricky:

* Delimiters may not be interpreted as intended if they don't abut
whitespace on both sides; the fix for this is to double them up, as
explained under
http://www.methods.co.nz/asciidoc/userguide.html#X52[``Constrained and
Unconstrained Quotes''] in the AsciiDoc User Guide.  For example,
compare how these render in the PDF: _+foo+ bar_ vs. _++foo++ bar_

* Attempting to nest inlines within each other may result in invalid
DocBook (because the content model of one may not include the
other). For example, *+foo+* requires the asterisk (*) pair outside
and the plus-symbol (+) pair inside.  If you try the other way around,
the build will fail and you'll find a message like this in [role =
"filename"]_pdf/.dcpsgen.buildlog_: 

----
Element emphasis is not declared in literal list of possible children
----

* For more precise semantics, you can always use ``passthroughs'' to
  embed DocBook markup as is,
  e.g. pass:[<replaceable>foo</replaceable>],
  pass:[<userinput>foo</userinput>], and
  pass:[<userinput><replaceable>foo</replaceable></userinput>] are
  fairly common in O'Reilly books, rendered as CWI, CWB, and CWBI,
  respectively (constant-width with italic, bold, and bold+italic).

[NOTE]
====
While it's easy to apply *bold* and it's one of our standard
conventions in code (to denote *+user input+*), please note that it's
rarely used for body text in O'Reilly books (for general emphasis, our
style is to use _italics_). Please discuss with your editor if you
have questions about whether or when boldface is appropriate.
====

For generic emphasis, you can also surround a string with single,
straight quotation marks (apostrophes): i.e., 'this' is equivalent to
_that_. As an enhancement for finer-tuned semantic distinctions
downstream, the ORM config supports the following variants, via 
`@role` attributes:

* to indicate a filename or path, use [role="filename"]'/path/to/file.ext' or [role="filename"]_/path/to/file.ext_
* for a book title, use [role="citetitle"]'This Book Needs No Title' or [role="citetitle"]_This Book Needs No Title_

To get curly quotes you can use asciidoc's mechanism for `singles' and
``doubles'' (or you can always use Unicode like so: &#x201C;quote
me&#x201D;). Note that it's also fine to leave straight quotes in
running text; part of our intake process curls quotes in body, while
leaving them unchanged in literal and code contexts.

Subscripts and superscripts work like so: H~2~O and 2^5^ = 32 (but if
you're doing math, you'd probably want to italicize the variables,
like so: _x_^2^ + _y_^2^ = _z_^2^). For more on math see !!ORMTODO!!.

Standard O'Reilly font conventions are as follows:

++++
<remark>DocBook passthrough, for comparison:</remark>
<literallayout>
  <emphasis>emphasis (italic)</emphasis>
  <literal>literal (constant width)</literal>
  <userinput>userinput (constant-width bold)</userinput>
  <replaceable>replaceable (constant-width italic)</replaceable>
  <userinput><replaceable>userinput+replaceable (constant-width bold+italic)</replaceable></userinput>
</literallayout>
++++

These are usually explained in a +<variablelist>+ (asciidoc's
``labeled list'') in the preface, but note that expressing inlines in
the ``item label'' (+<term>+) as opposed to the text description
(+<listitem>+) can be tricky, as shown in the first item below. If you
have questions about how to do these, please ask...

// ORMTODO: Fix/explain first below (override for <term role=plain>)

++++
<variablelist>
  <varlistentry>
    <term role="plain">Plain</term>
      <listitem><para>Body text.</para></listitem>
  </varlistentry>
</variablelist>
++++
        
Italic::
  _Ital_ indicates new terms, URLs, email addresses, filenames, and file extensions. 
+Constant width+::
  +CW+ is used for program listings, as well as within paragraphs to refer to program elements
  such as variable or function names, databases, data types, environment variables,
  statements, and keywords.
*+Constant width bold+*::
  *+CWB+* shows commands or other text that should be typed literally by the user.
pass:[<replaceable>Constant width italic</replaceable>]::
  pass:[<replaceable>CWI</replaceable>] shows text that should be replaced with user-supplied values or by values determined
  by context.

[WARNING]
====
Please do not use asciidoc's mechanisms for forcing linebreaks, page
breaks, or "ruler" lines, as these don't mesh with our production
process. (Your production editor will handle linebreaks and
pagebreaking at appropriate stages of the production process.)
====

If using footnotes, please place the macrofootnote:[This is a standard
footnote.] directly after the text, with no space between (otherwise
you'll introduce extra space footnote:[This one has extraneous space
before the in-text mark (although the footnote itself is fine).]
before the in-text mark); footnotes at the end of a sentence belong
after the period.footnote:[If your footnote text includes +++[square
brackets]+++, you can escape them with a passthrough macro.]


[[BLOCKS]]
=== Block Elements

==== Sidebars

Here's a +<sidebar>+:

.Titled vs. Untitled Blocks
****
O'Reilly house style generally uses titles only on formal blocks
(figures, tables, examples, and sidebars in particular). Although
asciidoc supports optional titles on many other blocks, these
generally are not appropriate for O'Reilly books.

Conversely, _omitting_ a title from a sidebar is generally not
conformant to O'Reilly style. If you have questions about whether
content belongs in an sidebar vs. admonition vs. quote or other
element, please consult with your editor.
****

==== Code ("Listing" Blocks and Examples)

Here's a code block:

----
Hello world!

Standard line length for code is 85 in an "Animal" book:

0        10        20        30        40        50        60        70        80
1234567890123456789012345678901234567890123456789012345678901234567890123456789012345
----

Anything longer than the above will spill into the margin and have to be broken 
before the book goes to print. It's most efficient for you to keep an eye on code 
lengths and adjust linebreaks yourself before submitting the book for production.

Note that the maximum length within a formal example is slightly
longer (as shown in <<EX1>>); within other elements such as notes and
sidebars, it will be slightly smaller. (If your book is a "small
Animal" (6x9) or a different series, its width constraints will be
different; more extensive examples can be found at
https://prod.oreilly.com/external/tools/docbook/prod/trunk/samples/code_lengths/
but please check with your editor or mailto:toolsreq@oreilly.com[] if you are
unsure which applies to your book.)

Contrast the code block above with <<EX1>>, which is a _formal_ code
example (titled and cross-referenced).

[[EX1]]
.An Example
====
----
Hello world!

Note that the line length is a bit longer here (90 in an Animal):

0        10        20        30        40        50        60        70        80        9
123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890
----
====

===== Inline Formatting within Code

In asciidoc, there is no built-in mechanism for inline formatting
within code. If you want to use inline formatting--in particular,
for standard O'Reilly font conventions such as *+<userinput> (CW+bold)+*
and _++<replaceable> (CW+italic)++_ or if you want to include line
annotations--you can do so by using a passthrough block, like so:

++++
<screen>hostname $ <userinput>date</userinput>
Sun Apr  1 12:34:56 GMT 1984</screen>
++++

or this:

++++
<programlisting>from __future__ import with_statement # This isn't required in Python 2.6
                          <lineannotation>Above is a comment in the code, while this is an "annotation" for the book</lineannotation>
with open("<replaceable>hello.txt</replaceable>") as f:  
    for line in f:        <lineannotation>(note regular italic here vs. constant-width in "hello.txt" on line above)</lineannotation>
        print line</programlisting>


++++

Notes:

* code blocks in asciidoc convert to `<screen>` by default; when using
  a passthrough block, you can choose whether to make it `<screen>` or
  `<programlisting>` (they'll render the same in the PDF).

* all whitespace in ++<programlisting>++s and ++<screen>++s is
  significant, including leading or trailing blank lines, as shown below

To avoid extra vertical space in layout when using passthrough blocks
for code, do them like this:

++++
<programlisting>class C:
    def method(self):
        pass</programlisting>
++++

not like this:

++++
<programlisting>
class C:
    def method(self):
        pass
</programlisting>
++++

===== External Code Files

To include an external code file that is text-only (no markup), use
the +include::+ macro inside of a delimited code block, as shown here:

----
include::code/HelloWorld.java[]
----

To include an external file that contains inline markup (e.g., for
callouts, line annotations, or inline font formatting), skip the code
block delimiters around the +include::+ macro, and instead place
passthrough delimiters within the included file, like so:

include::code/inline_markup.txt[]


===== Code Callouts

In DocBook, code callouts are used to mark specific lines of code with
icons keyed to explanatory text outside the code block. These icon
pairs function as bidirectional links in electronic PDF and downstream
formats (i.e., you can click on the icon in the code to jump to the
explanation, and vice versa). 

The built-in asciidoc mechanism (shown in <<asc_callouts>>) is
somewhat more limited; for one thing, icons are hyperlinked from text
to code, but not vice versa. However, you can always use a passthrough
block for full functionality, as shown in <<bidir_callouts>>.

If you have a need to refer to the same bit of explanatory text from
more than one line of code, see <<callout-multiples>> (in <<chapid_2>>).

[[asc_callouts]]
.Built-in Callout Mechanism (Unidirectional Callouts)
====
-----------------------------------------------------
 10/17/97   9:04         <DIR>    bin
 10/16/97  14:11         <DIR>    DOS            <1>
 10/16/97  14:40         <DIR>    Program Files
 10/16/97  14:46         <DIR>    TEMP
 10/17/97   9:04         <DIR>    tmp
 10/16/97  14:37         <DIR>    WINNT
 10/16/97  14:25             119  AUTOEXEC.BAT   <2>
  2/13/94   6:21          54,619  COMMAND.COM    
 10/16/97  14:25             115  CONFIG.SYS     
 11/16/97  17:17      61,865,984  pagefile.sys
  2/13/94   6:21           9,349  WINA20.386     <3>
-----------------------------------------------------
====
<1> This directory holds MS-DOS.
<2> System startup code for DOS.
<3> Some sort of Windows 3.1 hack.

[[bidir_callouts]]
.Bidirectional Callouts, via Passthrough Markup
====
++++
<programlisting>class C: <co id="thing-co" linkends="thing"/>
    def method(self):
        pass</programlisting>

<calloutlist>
<callout id="thing" arearefs="thing-co">
<para>The benefits of bidirectional callouts are more evident on longer listings...</para>
</callout>
</calloutlist>
++++
====

[WARNING]
===============================
If using passthroughs for callouts, please use the paired markup as
shown above (not +<areaspec>+, which our toolchain does not support).
For more on DocBook callout markup, see
https://prod.oreilly.com/external/tools/docbook/docs/authoring/html/docbookguidelines.html#id2557661[``Annotating
Your Code in DocBook'' in our DocBook authoring docs].
===============================

===== Syntax Highlighting

O'Reilly's EPUB toolchain now supports syntax highlighting via http://pygments.org/[Pygments]. All you need to do is add +[source]+ above each code block that you want to be syntax-highlighted, and specify the language of the code. For example, the following code:

....
[source,java]
----
int radius = 40;
float x = 110;
float speed = 0.5;
int direction = 1;
----
....

will render in the EPUB as follows:

[[FIG_syntax]]
image::images/syntax_highlighting.png[width="222px"]

Pygments supports a wide variety of languages that can be used in +[source]+; see the full list at http://pygments.org/docs/lexers/. Ebook readers that do not have color screens will still display the highlighting, but in more subtle shades of gray.

Please note the following caveats:

* This feature is EPUB-only for the time being. We're working on support for ebook PDFs. Syntax highlighting is not supported for print books.

* Highlighting will not be applied to any code that has inline markup, even if +[source]+ is added above the code block.

* The color scheme cannot be changed at this time.

If you would like to do something in a language that's not supported, please write to us at mailto:toolsreq@oreilly.com[] and we'll try to work with you on incorporating it.


==== Admonitions (Notes and Warnings)

Here are some admonitions:

[NOTE]
===============================
O'Reilly Animal books traditionally make no distinction between the
DocBook +<note>+, +<tip>+, and +<important>+ elements.
===============================

.Titled Admonition
[TIP]
===============================
We do support optional titles in admonitions (in most series).
===============================

[WARNING]
===============================
O'Reilly Animal books traditionally make no distinction between the
DocBook +<warning>+ and +<caution>+ elements.
===============================

[CAUTION]
===============================
O'Reilly Animal books traditionally make no distinction between the
DocBook +<warning>+ and +<caution>+ elements.
===============================

==== Figures and Other Images

Somewhere nearby is <<FIG1>> (a figure, titled and
cross-referenced). Unlike other block elements, figures "float" by
default (after the book enters production, your production editor will
adjust their placement as needed). While asciidoc permits you to
specify various image-related attributes for
scaling/alignment/etc.,footnote:[http://www.methods.co.nz/asciidoc/userguide.html#X9]
generally these sorts of adjustments are not necessary for production
(and some of them are only for its HTML output, not DocBook).  As part
of the production process, your images will be processed by a
professional illustrator to ensure their size, resolution, color, and
fonts are appropriate for the printed page as well as online channels.

However, if you find that any of your images overflow the PDF page as
is, then you can you can force-scale them by setting a +width+
attribute as shown in the markup for <<FIG2>>; note that this is
strictly for your own convenience while reviewing the PDFs; it's not
necessary for production. (When the manuscript is submitted for
production, our "intake" process will strip out any tweaks you've made
to image-related attributes, instead using standardized markup along
with reprocessed versions of your images prepared by illustration
staff.)

[NOTE]
====
For general guidelines on preparing illustrations--along with how and
when to get in touch with our illustration staff--see
https://prod.oreilly.com/external/illustrations/. Thanks for your
attention to these details.
====

[[FIG1]]
.A Figure
image::images/tiger.png[]

[[FIG2]]
.Another Figure
image::images/screenshot.png[width="4.8in"]

.When Does an Image Not Belong in a Figure?
****
O'Reilly books generally use informal figures (standalone images
without captions) sparingly; please consult first with your editor.

Inline images (such as icons) are appropriate on occasion, but may
cause problems downstream, in addition to requiring additional
processing by illustration staff (for sizing relative to text) and
manual placement during production (to ensure that they align
appropriately). If you plan to use inline images, please discuss the
rationale early on with your editor and the illustration staff, and
call our attention to them when the book is submitted to production so
we can handle them properly.

Here's some dummy text around an inline image to demonstrate why these
can be problematic. Even if image:images/icons/up.png[] were sized
appropriately relative to the text height in the printed book and PDF,
that might not work so well for other downstream channels.  
****


==== Lists

===== Labeled (aka Variable or Term-Definition) Lists

Term 1::
  Definition/description
Term 2::
  Something else

===== Bulleted (aka Itemized) Lists

* lions
* tigers
** sabre-toothed
** teapotted
* bears

===== Ordered (aka Numbered) Lists

. Preparation
. Assembly
.. Measure 
.. Combine
.. Bake
. Applause

==== Tables

O'Reilly table styles vary slightly between series; those styles are
supplied by our stylesheets. Please don't use asciidoc markup to
change the gridlines and so forth, as such alterations may be stripped
out once the book moves into production. Similarly, don't bother
fine-tuning things like column widths, as that will be handled by your
production editor for the print version (and may not carry over for
downstream channels). If your material warrants something other than
the default style as shown in <<STD_TABLE>>, please consult with your
editor and be sure to communicate what you intend when the book is
submitted for production.

[[STD_TABLE]]
.A Table
[options="header"]
|=======
|P|Q|P^Q
|T|T|T
|T|F|F
|F|T|F
|F|F|F
|=======

==== Other Block Elements

++++
<remark>Use a passthrough block like this for notes to production staff</remark>
++++

// NB: asciidoc comments do _not_ get passed to DocBook output by 
// default. If want to add a note for production staff, use a 
// passthrough block to embed it in a <remark> element instead. 
// By default, this will be preserved in the generated DocBook
// (book.dcpsgen.xml) but will not render in your 
// PDF; if you would like <remark>s to be visible in your drafts PDFs 
// for convenience, send a request to toolsreq@oreilly.com and we'll 
// toggle a switch that will render them in red (as shown in the 
// pdf/demo_with_commentary.pdf version of this doc).

Here's a +<quote>+ attributed to Benjamin Disraeli (by Wilfred
Meynell, according to Frank Muir):

[quote]
____
Many thanks; I shall lose no time in reading it.
____

Finally, keep in mind that there may be situations where it's hard to
get asciidoc to format something the way you want. Sometimes there's a
trick to get around it; sometimes it's better to use a passthrough
block to embed a bit of DocBook; and sometimes there may be a
different formatting approach that will mesh better with our
production systems. If you need to do something not illustrated in
this chapter, please ask mailto:toolsreq@oreilly.com[]... 


